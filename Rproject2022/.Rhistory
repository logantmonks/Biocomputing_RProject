N.IPDEA.ci = apply(N.IPDEA,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.IPDEA.ci[1,],N.IPDEA.ci[3,],col=col.alpha(N.cols[5],trans))
ecoforecastR::ciEnvelope(time2,N.IPDE.ci[1,],N.IPDE.ci[3,],col=col.alpha(N.cols[4],trans))
ecoforecastR::ciEnvelope(time2,N.IPD.ci[1,],N.IPD.ci[3,],col=col.alpha(N.cols[3],trans))
ecoforecastR::ciEnvelope(time2,N.IP.ci[1,],N.IP.ci[3,],col=col.alpha(N.cols[2],trans))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
### calculation of variances
varI     <- apply(N.I,2,var)
varIP    <- apply(N.IP,2,var)
varIPD   <- apply(N.IPD,2,var)
varIPDE  <- apply(N.IPDE,2,var)
varIPDEA <- apply(N.IPDEA,2,var)
varMat   <- rbind(varI,varIP,varIPD,varIPDE,varIPDEA)
## out-of-sample stacked area plot
V.pred.rel <- apply(varMat,2,function(x) {x/max(x)})
plot(time2,V.pred.rel[1,],ylim=c(0,1),type='n',main="Relative Variance: Out-of-Sample",ylab="Proportion of Variance",xlab="time")
ciEnvelope(time2,rep(0,ncol(V.pred.rel)),V.pred.rel[1,],col=N.cols[1])
ciEnvelope(time2,V.pred.rel[1,],V.pred.rel[2,],col=N.cols[2])
ciEnvelope(time2,V.pred.rel[2,],V.pred.rel[3,],col=N.cols[3])
ciEnvelope(time2,V.pred.rel[3,],V.pred.rel[4,],col=N.cols[4])
ciEnvelope(time2,V.pred.rel[4,],V.pred.rel[5,],col=N.cols[5])
legend("topleft",legend=c("RandomEffect","Process","Driver","Parameter","InitCond"),col=rev(N.cols),lty=1,lwd=5)
## in-sample stacked area plot
V.pred.rel.in <- apply(varMat[-5,],2,function(x) {x/max(x)})
plot(time2,V.pred.rel.in[1,],ylim=c(0,1),type='n',main="Relative Variance: In-Sample",ylab="Proportion of Variance",xlab="time")
ciEnvelope(time2,rep(0,ncol(V.pred.rel.in)),V.pred.rel.in[1,],col=N.cols[1])
ciEnvelope(time2,V.pred.rel.in[1,],V.pred.rel.in[2,],col=N.cols[2])
ciEnvelope(time2,V.pred.rel.in[2,],V.pred.rel.in[3,],col=N.cols[3])
ciEnvelope(time2,V.pred.rel.in[3,],V.pred.rel.in[4,],col=N.cols[4])
legend("topleft",legend=c("Process","Driver","Parameter","InitCond"),col=rev(N.cols[-5]),lty=1,lwd=5)
plot(time,ci[2,],type='n',ylim=range(y,na.rm=TRUE),ylab="NEE",xlim=time[time.rng])
#JAGS code for model
NEEmodel = "
model{
#### Data Model
for(t in 1:n){
y[t] ~ dnorm(x[t],tau_obs)
}
#### Process Model
for(t in 2:n){
x[t]~dnorm(x[t-1],tau_add)
}
#### Priors
x[1] ~ dnorm(x_ic,tau_ic)
tau_obs ~ dnorm(a_obs,r_obs)
tau_add ~ dnorm(a_add,r_add)
}
"
y <- undercdata$observation
time <- as.Date(undercdata$datetime)
data <- list(y=(y),n=length(y),      ## data
x_ic=(0),tau_ic=1, ## initial condition prior
a_obs=0,r_obs=1,           ## obs error prior
a_add=0,r_add=1            ## process error prior
)
#define initial state of model parameters for MCMC chains
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff((y.samp))),  ## initial guess on process precision
tau_obs=5/var((y.samp)))        ## initial guess on obs precision
}
#run model
j.model   <- jags.model (file = textConnection(NEEmodel),
data = data,
inits = init,
n.chains = 3)
#take sample from MCMC output
jags.out   <- coda.samples (model = j.model,
variable.names = c("x","tau_add","tau_obs"),
n.iter = 10000)
#plot
time.rng = c(1,length(time))       ## adjust to zoom in and out
out <- as.matrix(jags.out)         ## convert from coda to matrix
x.cols <- grep("^x",colnames(out)) ## grab all columns that start with the letter x
ci <- apply((out[,x.cols]),2,quantile,c(0.025,0.5,0.975))
ModelMedian<- ci[2,]
plot(time,ci[2,],type='n',ylim=range(y,na.rm=TRUE),ylab="NEE",xlim=time[time.rng])
## adjust x-axis label to be monthly if zoomed
if(diff(time.rng) < 100){
axis.Date(1, at=seq(time[time.rng[1]],time[time.rng[2]],by='month'), format = "%Y-%m")
}
ecoforecastR::ciEnvelope(time,ci[1,],ci[3,],col=ecoforecastR::col.alpha("lightBlue",0.75))
points(time,y,pch="+",cex=0.5)
points(time,ci[2,],pch="+",cex=0.5,col="red")
plot.run.test <- function(){
plot(time,time,type='n',ylim=ylim,ylab="N")
ecoforecastR::ciEnvelope(time1,ci[1,sel],ci[3,sel],col=col.alpha("lightBlue",0.6))
lines(time1,ci[2,sel],col="blue")
points(time1,No[s,])
}
plot.run.test()
View(ci)
sel = seq(s,ncol(ci),by=NS)
plot.run.test <- function(){
sel = seq(s,ncol(ci),by=NS)
plot(time,time,type='n',ylim=ylim,ylab="N")
ecoforecastR::ciEnvelope(time1,ci[1,sel],ci[3,sel],col=col.alpha("lightBlue",0.6))
lines(time1,ci[2,sel],col="blue")
points(time1,No[s,])
}
plot.run.test()
plot.run.test <- function(){
plot(time,ci[2,],type='n',ylim=range(y,na.rm=TRUE),ylab="NEE",xlim=time[time.rng])
## adjust x-axis label to be monthly if zoomed
if(diff(time.rng) < 100){
axis.Date(1, at=seq(time[time.rng[1]],time[time.rng[2]],by='month'), format = "%Y-%m")
}
ecoforecastR::ciEnvelope(time,ci[1,],ci[3,],col=ecoforecastR::col.alpha("lightBlue",0.75))
points(time,y,pch="+",cex=0.5)
points(time,ci[2,],pch="+",cex=0.5,col="red")
}
plot.run.test()
plot.run.test <- function(){
plot(time,ci[2,],type='n',ylim=range(y,na.rm=TRUE),ylab="NEE",xlim=time[time.rng]+50)
## adjust x-axis label to be monthly if zoomed
if(diff(time.rng) < 100){
axis.Date(1, at=seq(time[time.rng[1]],time[time.rng[2]],by='month'), format = "%Y-%m")
}
ecoforecastR::ciEnvelope(time,ci[1,],ci[3,],col=ecoforecastR::col.alpha("lightBlue",0.75))
points(time,y,pch="+",cex=0.5)
points(time,ci[2,],pch="+",cex=0.5,col="red")
}
plot.run.test()
plot.run.test <- function(){
plot(time,ci[2,],type='n',ylim=range(y,na.rm=TRUE),ylab="NEE",xlim=time[time.rng]+100)
## adjust x-axis label to be monthly if zoomed
if(diff(time.rng) < 100){
axis.Date(1, at=seq(time[time.rng[1]],time[time.rng[2]],by='month'), format = "%Y-%m")
}
ecoforecastR::ciEnvelope(time,ci[1,],ci[3,],col=ecoforecastR::col.alpha("lightBlue",0.75))
points(time,y,pch="+",cex=0.5)
points(time,ci[2,],pch="+",cex=0.5,col="red")
}
plot.run.test()
## sample parameter rows from previous analysis
prow = sample.int(nrow(params),Nmc,replace=TRUE)
N.I <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
ppt=ppt.mean,
r=param.mean["r_global"],
Kg=param.mean["K_global"],
beta=param.mean["beta"],
alpha=param.mean["alpha_site[6]"],
Q=0,
n=Nmc)
## Plot run
plot.run()
N.I.ci = apply(N.I,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
## sample parameter rows from previous analysis
prow = sample.int(nrow(params),Nmc,replace=TRUE)
N.I <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
ppt=ppt.mean,
r=param.mean["r_global"],
Kg=param.mean["K_global"],
beta=param.mean["beta"],
alpha=param.mean["alpha_site[6]"],
Q=0,
n=Nmc)
## Plot run
plot.run()
knitr::opts_chunk$set(echo = TRUE)
load("C:/Users/Natha/Documents/Github/EF_ActivitiesNDK/data/Ch11_UA.RData")
library(ecoforecastR)
plot(0,0,type = "n",xlim=c(0,NT),ylim = range(No),xlab="time",ylab="No")
for(s in 1:NS) {
points(No[s,],col=s,type='b')
}
plot(precip,type='b',xlab="time",ylab="precip (mm/yr)")
logisticRE <- "
model{
## priors
r_global ~ dnorm(0,0.1)     ## across-site mean growth rate
K_global ~ dlnorm(6,0.01)   ## across-site mean carrying capacity
beta ~ dnorm(0,0.000001)    ## slope of K response to precip
tau_site ~ dgamma(0.1,0.1)  ## site random effect precision
R ~ dgamma(0.01,0.00000001) ## Observation error precision
Q ~ dgamma(0.01,0.00000001) ## Process errror precision
## random effects and initial conditions, s = site
for(s in 1:NS){
alpha_site[s] ~ dnorm(0,tau_site)  ## random site effect on K
lN[s,1] ~ dnorm(6,0.001)           ## prior on IC, log scale
N[s,1] <- exp(lN[s,1])             ## IC, linear scale
}
## process model, t = time, s = site
for(t in 2:NT){
for(s in 1:NS){
## K is a linear model with a site random effect and fixed effect on log(precip)
K[s,t]  <- max(1,K_global+alpha_site[s]+beta*log(precip[t]/800))
## standard logistic growth process model, logged
mu[s,t] <- log(max(1,N[s,t-1] + r_global*N[s,t-1]*(1-N[s,t-1]/K[s,t])))
## process error
lN[s,t] ~ dnorm(mu[s,t],Q)
N[s,t] <- exp(lN[s,t])
}
}
## observation model
for(t in 1:NT){
for(s in 1:NS){
No[s,t] ~ dlnorm(lN[s,t],R)
}
}
}
"
## parameters
plot(out$params)
summary(out$params)
## states
ci <- apply(as.matrix(out$predict),2,quantile,c(0.025,0.5,0.975))
time = 1:NT
plot(0,0,type = "n",xlim=c(0,NT),ylim = range(ci),xlab="time",ylab="N")
for(s in 1:NS){
sel = seq(s,ncol(ci),by=NS)
ecoforecastR::ciEnvelope(time,ci[1,sel],ci[3,sel],col=col.alpha(s,0.6))
lines(time,ci[2,sel],col=s)
points(time,No[s,],col=s,pch=19)
points(time,No[s,])
}
### settings
s <- 6             ## Focal site for forward simulation
Nmc = 1000         ## set number of Monte Carlo draws
ylim = c(100,700)  ## set Y range on plot
N.cols <- c("black","red","green","blue","orange") ## set colors
trans <- 0.8       ## set transparancy
time = 1:(NT*2)    ## total time
time1 = 1:NT       ## calibration period
time2 = time1+NT   ## forecast period
plot.run <- function(){
sel = seq(s,ncol(ci),by=NS)
plot(time,time,type='n',ylim=ylim,ylab="N")
ecoforecastR::ciEnvelope(time1,ci[1,sel],ci[3,sel],col=col.alpha("lightBlue",0.6))
lines(time1,ci[2,sel],col="blue")
points(time1,No[s,])
}
ci <- apply(as.matrix(out$predict),2,quantile,c(0.025,0.5,0.975))
plot.run()
##` @param IC    Initial Conditions
##` @param ppt   Precipitation forecast
##` @param r     Intrinsic growth rate
##` @param Kg    Across-site ('global') mean carrying capacity
##` @param beta  Slope of precipitation effect on K
##` @param alpha Site random effect
##` @param Q     Process error (default = 0 for deterministic runs)
##` @param n     Size of Monte Carlo ensemble
forecastN <- function(IC,ppt,r,Kg,beta,alpha,Q=0,n=Nmc){
N <- matrix(NA,n,NT)  ## storage
Nprev <- IC           ## initialize
for(t in 1:NT){
K = pmax(1,Kg + alpha + beta*log(ppt[,t]/800))  ## calculate carrying capacity
mu = log(pmax(1,Nprev + r*Nprev*(1-Nprev/K)))   ## calculate mean
N[,t] <- rlnorm(n,mu,Q)                         ## predict next step
Nprev <- N[,t]                                  ## update IC
}
return(N)
}
## calculate mean of all inputs
ppt.mean <- matrix(apply(ppt_ensemble,2,mean),1,NT) ## driver
## parameters
params <- as.matrix(out$params)
param.mean <- apply(params,2,mean)
## initial conditions
IC <- as.matrix(out$predict)
N.det <- forecastN(IC=mean(IC[,"N[6,30]"]),
ppt=ppt.mean,
r=param.mean["r_global"],
Kg=param.mean["K_global"],
beta=param.mean["beta"],
alpha=param.mean["alpha_site[6]"],
Q=0,  ## process error off
n=1)
## Plot run
plot.run()
lines(time2,N.det,col="purple",lwd=3)
## sample parameter rows from previous analysis
prow = sample.int(nrow(params),Nmc,replace=TRUE)
N.I <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
ppt=ppt.mean,
r=param.mean["r_global"],
Kg=param.mean["K_global"],
beta=param.mean["beta"],
alpha=param.mean["alpha_site[6]"],
Q=0,
n=Nmc)
## Plot run
plot.run()
N.I.ci = apply(N.I,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
N.IP <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
ppt=ppt.mean,
r=params[prow,"r_global"],  ## sample parameters
Kg=params[prow,"K_global"],
beta=params[prow,"beta"],
alpha=params[prow,"alpha_site[6]"],
Q=0,
n=Nmc)
## Plot run
plot.run()
N.IP.ci = apply(N.IP,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.IP.ci[1,],N.IP.ci[3,],col=col.alpha(N.cols[2],trans))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
plot(time2,ppt_ensemble[1,],type='n',ylim=range(ppt_ensemble),xlab="time",ylab="precipitation (mm)")
for(i in 1:NE){
lines(time2,ppt_ensemble[i,],lwd=0.5,col="grey")
}
## sample driver rows
drow = sample.int(nrow(ppt_ensemble),Nmc,replace=TRUE)
N.IPD <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
ppt=ppt_ensemble[drow,],   ## Sample drivers
r=params[prow,"r_global"],  ## sample parameters
Kg=params[prow,"K_global"],
beta=params[prow,"beta"],
alpha=params[prow,"alpha_site[6]"],
Q=0,
n=Nmc)
## Plot run
plot.run()
N.IPD.ci = apply(N.IPD,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.IPD.ci[1,],N.IPD.ci[3,],col=col.alpha(N.cols[3],trans))
ecoforecastR::ciEnvelope(time2,N.IP.ci[1,],N.IP.ci[3,],col=col.alpha(N.cols[2],trans))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
## process error samples
Qmc <- 1/sqrt(params[prow,"Q"])  ## convert from precision to standard deviation
N.IPDE <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
ppt=ppt_ensemble[drow,],   ## Sample drivers
r=params[prow,"r_global"],  ## sample parameters
Kg=params[prow,"K_global"],
beta=params[prow,"beta"],
alpha=params[prow,"alpha_site[6]"],
Q=Qmc,
n=Nmc)
## Plot run
plot.run()
N.IPDE.ci = apply(N.IPDE,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.IPDE.ci[1,],N.IPDE.ci[3,],col=col.alpha(N.cols[4],trans))
ecoforecastR::ciEnvelope(time2,N.IPD.ci[1,],N.IPD.ci[3,],col=col.alpha(N.cols[3],trans))
ecoforecastR::ciEnvelope(time2,N.IP.ci[1,],N.IP.ci[3,],col=col.alpha(N.cols[2],trans))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
## Random effect samples
tau.mc <- 1/sqrt(params[prow,"tau_site"]) ## convert from precision to std deviation
aNew.mc <- rnorm(Nmc,0,tau.mc)            ## draw out-of-sample predictions of alpha at a new site
N.IPDEA <- forecastN(IC=IC[prow,"N[6,30]"],    ## sample IC
ppt=ppt_ensemble[drow,],    ## Sample drivers
r=params[prow,"r_global"],  ## sample parameters
Kg=params[prow,"K_global"],
beta=params[prow,"beta"],
alpha=aNew.mc,              ## sample random effect
Q=Qmc,                      ## process error
n=Nmc)
## Plot run
plot.run()
N.IPDEA.ci = apply(N.IPDEA,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.IPDEA.ci[1,],N.IPDEA.ci[3,],col=col.alpha(N.cols[5],trans))
ecoforecastR::ciEnvelope(time2,N.IPDE.ci[1,],N.IPDE.ci[3,],col=col.alpha(N.cols[4],trans))
ecoforecastR::ciEnvelope(time2,N.IPD.ci[1,],N.IPD.ci[3,],col=col.alpha(N.cols[3],trans))
ecoforecastR::ciEnvelope(time2,N.IP.ci[1,],N.IP.ci[3,],col=col.alpha(N.cols[2],trans))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
## JMc code: I think this is correct...
## Random effect samples
tau.mc <- 1/sqrt(params[prow,"tau_site"]) ## converst from precision to std deviation
tau.mc.mean = mean(tau.mc)
aNew.mc <- rnorm(Nmc,0,tau.mc.mean)
N.IPDEA <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
r=params[prow,"r_global"],  ## sample parameters
Kg=params[prow,"K_global"],
alpha=aNew.mc,              ## sample random effect
beta=params[prow,"beta"],
ppt=ppt_ensemble[drow,],   ## Sample drivers
Q=Qmc,
n=Nmc)
## Plot run
plot.run()
N.IPDEA.ci = apply(N.IPDEA,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.IPDEA.ci[1,],N.IPDEA.ci[3,],col=col.alpha(N.cols[5],trans))
ecoforecastR::ciEnvelope(time2,N.IPDE.ci[1,],N.IPDE.ci[3,],col=col.alpha(N.cols[4],trans))
ecoforecastR::ciEnvelope(time2,N.IPD.ci[1,],N.IPD.ci[3,],col=col.alpha(N.cols[3],trans))
ecoforecastR::ciEnvelope(time2,N.IP.ci[1,],N.IP.ci[3,],col=col.alpha(N.cols[2],trans))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
### calculation of variances
varI     <- apply(N.I,2,var)
varIP    <- apply(N.IP,2,var)
varIPD   <- apply(N.IPD,2,var)
varIPDE  <- apply(N.IPDE,2,var)
varIPDEA <- apply(N.IPDEA,2,var)
varMat   <- rbind(varI,varIP,varIPD,varIPDE,varIPDEA)
## out-of-sample stacked area plot
V.pred.rel <- apply(varMat,2,function(x) {x/max(x)})
plot(time2,V.pred.rel[1,],ylim=c(0,1),type='n',main="Relative Variance: Out-of-Sample",ylab="Proportion of Variance",xlab="time")
ciEnvelope(time2,rep(0,ncol(V.pred.rel)),V.pred.rel[1,],col=N.cols[1])
ciEnvelope(time2,V.pred.rel[1,],V.pred.rel[2,],col=N.cols[2])
ciEnvelope(time2,V.pred.rel[2,],V.pred.rel[3,],col=N.cols[3])
ciEnvelope(time2,V.pred.rel[3,],V.pred.rel[4,],col=N.cols[4])
ciEnvelope(time2,V.pred.rel[4,],V.pred.rel[5,],col=N.cols[5])
legend("topleft",legend=c("RandomEffect","Process","Driver","Parameter","InitCond"),col=rev(N.cols),lty=1,lwd=5)
## in-sample stacked area plot
V.pred.rel.in <- apply(varMat[-5,],2,function(x) {x/max(x)})
plot(time2,V.pred.rel.in[1,],ylim=c(0,1),type='n',main="Relative Variance: In-Sample",ylab="Proportion of Variance",xlab="time")
ciEnvelope(time2,rep(0,ncol(V.pred.rel.in)),V.pred.rel.in[1,],col=N.cols[1])
ciEnvelope(time2,V.pred.rel.in[1,],V.pred.rel.in[2,],col=N.cols[2])
ciEnvelope(time2,V.pred.rel.in[2,],V.pred.rel.in[3,],col=N.cols[3])
ciEnvelope(time2,V.pred.rel.in[3,],V.pred.rel.in[4,],col=N.cols[4])
legend("topleft",legend=c("Process","Driver","Parameter","InitCond"),col=rev(N.cols[-5]),lty=1,lwd=5)
## sample parameter rows from previous analysis
prow = sample.int(nrow(params),Nmc,replace=TRUE)
N.I <- forecastN(IC=IC[prow,"N[6,30]"],  ## sample IC
ppt=ppt.mean,
r=param.mean["r_global"],
Kg=param.mean["K_global"],
beta=param.mean["beta"],
alpha=param.mean["alpha_site[6]"],
Q=0,
n=Nmc)
## Plot run
plot.run()
N.I.ci = apply(N.I,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
plot.run()
N.I.ci = apply(N.I,2,quantile,c(0.025,0.5,0.975))
ecoforecastR::ciEnvelope(time2,N.I.ci[1,],N.I.ci[3,],col=col.alpha(N.cols[1],trans))
lines(time2,N.I.ci[2,],lwd=0.5)
#Add column to target with Julian day
underc$julianday <- yday(underc$datetime)
#Average NEE observations by julian day
DOYaverage <- underc %>% group_by(julianday) %>% summarise(NEEav = mean(observation))
#plot NEE vs DAY of Year
plot(DOYaverage$julianday,DOYaverage$NEEav, type="p", pch=1, cex=0.5, main="NEE at UNDERC", xlab="Day of year", ylab="NEE (gC/m2/day)")
undercdata <- left_join(underc, DOYaverage, by = c("julianday" = "julianday"))
#JAGS code for model
NEEmodel = "
model{
#### Data Model
for(t in 1:n){
y[t] ~ dnorm(x[t],tau_obs)
}
#### Process Model
for(t in 2:n){
x[t]~dnorm(x[t-1],tau_add)
}
#### Priors
x[1] ~ dnorm(x_ic,tau_ic)
tau_obs ~ dnorm(a_obs,r_obs)
tau_add ~ dnorm(a_add,r_add)
}
"
y <- undercdata$observation
time <- as.Date(undercdata$datetime)
data <- list(y=(y),n=length(y),      ## data
x_ic=(0),tau_ic=1, ## initial condition prior
a_obs=0,r_obs=1,           ## obs error prior
a_add=0,r_add=1            ## process error prior
)
#define initial state of model parameters for MCMC chains
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff((y.samp))),  ## initial guess on process precision
tau_obs=5/var((y.samp)))        ## initial guess on obs precision
}
#run model
j.model   <- jags.model (file = textConnection(NEEmodel),
data = data,
inits = init,
n.chains = 3)
#take sample from MCMC output
jags.out   <- coda.samples (model = j.model,
variable.names = c("x","tau_add","tau_obs"),
n.iter = 10000)
?ecoforecastR
?fit_dlm
source("~/GitHub/NDbio4cast/group1_model/HistoricalModel1.R", echo=TRUE)
source("~/GitHub/NDbio4cast/group1_model/Ensemble_Model_attempt.R", echo=TRUE)
source("~/GitHub/NDbio4cast/group1_model/FutureModel.R", echo=TRUE)
rm(list=ls())
getwd()
help.start()
source("~/GitHub/NDbio4cast/group1_model/FutureModelv2.R", echo=TRUE)
install.packages("dadjoke")
library(dadjoke)
?dadjoke
dadjoke()
dadjoke()
dadjoke()
dadjoke()
dadjoke()
dadjoke()
source("~/GitHub/NDbio4cast/group1_model/FutureModelv2.R", echo=TRUE)
source("~/GitHub/NDbio4cast/group1_model/FutureModelv2.R", echo=TRUE)
source("~/GitHub/Biocomputing_RProject/Rproject2022/supportingFunctionsNK.R", echo=TRUE)
source("~/GitHub/Biocomputing_RProject/Rproject2022/supportingFunctionsNK.R", echo=TRUE)
### COUNTRY X ####
setwd("~/GitHub/Biocomputing_RProject/Rproject2022/Rproject2022")
getwd()
### COUNTRY X ####
setwd("~/GitHub/Biocomputing_RProject/Rproject2022/")
screen_files <- list.files("~/GitHub/Biocomputing_RProject/Rproject2022/Rproject2022/countryX")
screen_files <- list.files("~/GitHub/Biocomputing_RProject/Rproject2022/countryX")
source("~/GitHub/Biocomputing_RProject/Rproject2022/supportingFunctionsNK.R", echo=TRUE)
source("~/GitHub/Biocomputing_RProject/Rproject2022/supportingFunctionsNK.R", echo=TRUE)
dirX <- "C:/Users/Natha/Documents/GitHub/Biocomputing_RProject/Rproject2022/countryX"
dirY <- "C:/Users/Natha/Documents/GitHub/Biocomputing_RProject/Rproject2022/countryY"
allDataSubset <- allData[,3:12]
View(allDataSubset)
sum(allDataSubset[1,])
sum(allData[1,3:12])
